# -*- coding: utf-8 -*-
"""Twitter_Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RCo0yrpJPEahYHQog_axxDeJgkTRkbez
"""

pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d kazanova/sentiment140

from zipfile import ZipFile
dataset = "/content/sentiment140.zip"

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("The dataset is extracted")

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# printing the stopwords in English
print(stopwords.words('english'))

twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding='ISO-8859-1')

# Checking the number of rows and columns
twitter_data.shape

# printning the first 5 rows of th dataframe
twitter_data.head()

# Specify the column names
column_names = ['target', 'id', 'date', 'flag', 'user', 'text']

# Read the dataset into a DataFrame
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names=column_names, encoding='ISO-8859-1')

twitter_data.shape

twitter_data.sample(10)

# counting the number of missing values in the dataset
twitter_data.isnull().sum()

# checking the distribution of targt column
twitter_data['target'].value_counts()

# convert the target "4" to "1"
twitter_data.replace({'target':{4:1}}, inplace=True)

twitter_data['target'].value_counts()

"""0 ---> negative tweet
1 ---> positvie tweet

# Stemming -: is the process of reducing word to its root word
EX: actor , actress, acting  = act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ', content) # other than a-z, A-Z will be remove from tweet
  stemmed_content = stemmed_content.lower() # converting all the tweet in lower case
  stemmed_content = stemmed_content.split() # loading all the words in list
  #

  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)

  return stemmed_content

twitter_data ['stemmed_content'] = twitter_data['text'].apply(stemming)

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

# sperating the data and label
x = twitter_data['stemmed_content'].values
y = twitter_data['target'].values

print(x)

print(y)

# spliting the data to training and test data
X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size= 0.2, stratify=y, random_state=2)

print(x.shape, X_train.shape, X_test.shape)

print(X_train)

print(X_test)

# converting the textual data to numerical data

vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_test)

print(X_train)

# training the MAchine learning model
# logistic Regression : this algorith use for classification type and in this dataset we classifying the negative and possitive tweet
model = LogisticRegression(max_iter=1000)

model.fit(X_train, Y_train)

# model evalution
# accuracy Score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print("Accuracy score on the training data : ", training_data_accuracy)

# accuracy Score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print("Accuracy score on the testing data",test_data_accuracy)

"""Model Accuracy = 77.8%


Saving the trained mdoel
"""

import pickle

filename = 'twitter_analysis_model.sav'
pickle.dump(model, open(filename, 'wb'))

"""Using the saved model for future predictions

"""

# loading the saved model
loaded_model = pickle.load(open('/content/twitter_analysis_model.sav', 'rb'))

x_new = X_test[200]
print(Y_test[200])

prediction = loaded_model.predict(x_new)
print(prediction)

if (prediction[0] == 0):
  print('Negative tweet')

else:
  print('positive tween')

x_new = X_test[3]
print(Y_test[3])

prediction = loaded_model.predict(x_new)
print(prediction)

if (prediction[0] == 0):
  print('Negative tweet')

else:
  print('positive tween')